<%- include('partials/header', {title: '갤러리 관리 - 현대W&P'}) %>

<!-- 갤러리 관리 히어로 섹션 -->
<section class="hero-section">
  <div class="container">
    <div class="hero-content">
      <h1>갤러리 관리</h1>
      <p>시설 갤러리 이미지를 관리하고 업로드하세요</p>
    </div>
  </div>
</section>

<!-- 이미지 업로드 섹션 -->
<section class="section">
  <div class="container">
    <div class="upload-section">
      <h2>이미지 업로드</h2>
      <form id="imageUploadForm" enctype="multipart/form-data">
        <div class="upload-area" id="uploadArea">
          <div class="upload-content">
            <div class="upload-icon">📷</div>
            <h3>이미지를 드래그하거나 클릭하여 업로드</h3>
            <p>JPG, PNG, WEBP 파일만 지원됩니다 (최대 10MB)</p>
            <input type="file" id="imageInput" name="images" multiple accept="image/jpeg,image/png,image/webp" style="display: none;">
            <button type="button" class="btn btn-primary" onclick="document.getElementById('imageInput').click()">
              파일 선택
            </button>
          </div>
        </div>
        
        <div class="upload-preview" id="uploadPreview" style="display: none;">
          <h3>업로드할 이미지 미리보기</h3>
          <div class="preview-grid" id="previewGrid">
            <!-- 미리보기 이미지들이 여기에 표시됩니다 -->
          </div>
        </div>
        
        <div class="upload-actions" id="uploadActions" style="display: none; gap: 12px;">
          <button type="submit" class="btn btn-primary" id="uploadBtn">
            <span class="btn-text">이미지 업로드</span>
            <span class="btn-loading" style="display: none;">업로드 중...</span>
          </button>
          <button type="button" class="btn btn-secondary" id="cancelUploadBtn">
            취소
          </button>
        </div>
      </form>
    </div>
  </div>
</section>

<!-- 갤러리 관리 섹션 -->
<section class="section section-alt">
  <div class="container">
    <div class="gallery-management">
      <div class="gallery-header">
        <h2>갤러리 관리</h2>
        <div class="gallery-controls">
          <div class="filter-group">
            <label for="categoryFilter">카테고리:</label>
            <select id="categoryFilter" class="filter-select">
              <option value="">전체</option>
              <option value="facility">시설</option>
              <option value="equipment">장비</option>
              <option value="process">공정</option>
            </select>
          </div>
          <div class="search-group">
            <input type="text" id="gallerySearch" placeholder="제목, 설명으로 검색..." class="search-input">
            <button id="searchGalleryBtn" class="search-btn">검색</button>
            <button id="clearGalleryBtn" class="clear-btn">초기화</button>
          </div>
        </div>
      </div>
      
      <div class="gallery-grid" id="galleryGrid">
        <!-- 갤러리 이미지들이 여기에 동적으로 표시됩니다 -->
      </div>
      
      <div class="gallery-pagination" id="galleryPagination">
        <!-- 페이징이 여기에 표시됩니다 -->
      </div>
    </div>
  </div>
</section>

<!-- 이미지 편집 모달 -->
<div id="editImageModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>이미지 편집</h3>
      <span class="close">&times;</span>
    </div>
    <div class="modal-body">
      <div class="edit-form">
        <div class="form-group">
          <label for="editTitle">제목:</label>
          <input type="text" id="editTitle" class="form-input" maxlength="100">
        </div>
        <div class="form-group">
          <label for="editDescription">설명:</label>
          <textarea id="editDescription" class="form-textarea" rows="3"></textarea>
        </div>
        <div class="form-group">
          <label for="editCategory">카테고리:</label>
          <select id="editCategory" class="form-select">
            <option value="facility">시설</option>
            <option value="equipment">장비</option>
            <option value="process">공정</option>
          </select>
        </div>
        <div class="form-group">
          <label for="editSortOrder">정렬 순서:</label>
          <input type="number" id="editSortOrder" class="form-input" min="0">
        </div>
        <div class="form-group">
          <label class="checkbox-label">
            <input type="checkbox" id="editIsActive">
            <span class="checkmark"></span>
            활성화
          </label>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button id="saveImageBtn" class="btn btn-primary">저장</button>
      <button id="deleteImageBtn" class="btn btn-danger">삭제</button>
      <button id="cancelEditBtn" class="btn btn-secondary">취소</button>
    </div>
  </div>
</div>

<!-- 이미지 미리보기 모달 -->
<div id="imagePreviewModal" class="modal">
  <div class="modal-content image-preview-content">
    <div class="modal-header">
      <h3 id="previewTitle">이미지 미리보기</h3>
      <span class="close">&times;</span>
    </div>
    <div class="modal-body">
      <div class="image-preview-container">
        <img id="previewImage" src="" alt="" class="preview-image">
        <div class="image-info">
          <p><strong>파일명:</strong> <span id="previewFilename"></span></p>
          <p><strong>크기:</strong> <span id="previewSize"></span></p>
          <p><strong>해상도:</strong> <span id="previewResolution"></span></p>
          <p><strong>업로드일:</strong> <span id="previewDate"></span></p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* 업로드 영역 스타일 */
.upload-area {
  border: 2px dashed #ddd;
  border-radius: 8px;
  padding: 40px;
  text-align: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.upload-area:hover {
  border-color: #0066cc;
  background-color: #f8f9ff;
}

.upload-area.dragover {
  border-color: #0066cc;
  background-color: #e6f2ff;
}

.upload-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.upload-icon {
  font-size: 48px;
  opacity: 0.6;
}

.upload-preview {
  margin-top: 20px;
}

.upload-actions {
  margin-top: 10px;
  display: flex;
  gap: 12px;
}

.preview-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 16px;
  margin-top: 16px;
}

.preview-item {
  position: relative;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  background: white;
}

.preview-item img {
  width: 100%;
  height: 150px;
  object-fit: cover;
}

.preview-item-info {
  padding: 12px;
}

.preview-item-title {
  font-weight: bold;
  margin-bottom: 4px;
}

.preview-item-size {
  font-size: 12px;
  color: #666;
}

.preview-item-remove {
  position: absolute;
  top: 8px;
  right: 8px;
  background: rgba(255, 0, 0, 0.8);
  color: white;
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* 갤러리 그리드 스타일 */
.gallery-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.gallery-item {
  position: relative;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  background: white;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.gallery-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.gallery-item img {
  width: 100%;
  height: 200px;
  object-fit: cover;
}

.gallery-item-info {
  padding: 16px;
}

.gallery-item-title {
  font-weight: bold;
  margin-bottom: 8px;
  color: #333;
}

.gallery-item-description {
  color: #666;
  font-size: 14px;
  margin-bottom: 12px;
  line-height: 1.4;
}

.gallery-item-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 12px;
  color: #999;
}

.gallery-item-actions {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  gap: 4px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.gallery-item:hover .gallery-item-actions {
  opacity: 1;
}

.gallery-item-btn {
  background: rgba(0, 0, 0, 0.7);
  color: white;
  border: none;
  border-radius: 4px;
  padding: 6px 8px;
  cursor: pointer;
  font-size: 12px;
  transition: background 0.2s ease;
}

.gallery-item-btn:hover {
  background: rgba(0, 0, 0, 0.9);
}

.gallery-item-btn.edit {
  background: rgba(0, 102, 204, 0.8);
}

.gallery-item-btn.delete {
  background: rgba(220, 53, 69, 0.8);
}

/* 모달 스타일 */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: white;
  margin: 5% auto;
  padding: 0;
  border-radius: 8px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
}

.image-preview-content {
  max-width: 800px;
}

.modal-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-body {
  padding: 20px;
}

.modal-footer {
  padding: 20px;
  border-top: 1px solid #eee;
  display: flex;
  gap: 12px;
  justify-content: flex-end;
}

.close {
  font-size: 24px;
  font-weight: bold;
  cursor: pointer;
  color: #999;
}

.close:hover {
  color: #333;
}

/* 폼 스타일 */
.edit-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.form-group label {
  font-weight: bold;
  color: #333;
}

.form-input, .form-textarea, .form-select {
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.form-textarea {
  resize: vertical;
  min-height: 80px;
}

.checkbox-label {
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
}

/* 이미지 미리보기 */
.image-preview-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.preview-image {
  max-width: 100%;
  max-height: 400px;
  object-fit: contain;
  border-radius: 4px;
}

.image-info {
  background: #f8f9fa;
  padding: 16px;
  border-radius: 4px;
}

.image-info p {
  margin: 8px 0;
  font-size: 14px;
}

/* 반응형 */
@media (max-width: 768px) {
  .gallery-grid {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 16px;
  }
  
  .preview-grid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  }
  
  .modal-content {
    width: 95%;
    margin: 2% auto;
  }
}
</style>

<script>
// 갤러리 관리 JavaScript
class GalleryManager {
  constructor() {
    this.currentImages = [];
    this.currentPage = 1;
    this.itemsPerPage = 12;
    this.currentFilter = '';
    this.currentSearch = '';
    this.editingImageId = null;
    
    this.init();
  }
  
  init() {
    this.bindEvents();
    this.loadGallery();
  }
  
  bindEvents() {
    // 업로드 관련 이벤트
    const uploadArea = document.getElementById('uploadArea');
    const imageInput = document.getElementById('imageInput');
    const uploadForm = document.getElementById('imageUploadForm');
    
    // 업로드 영역 클릭 이벤트 (파일 선택 버튼 제외)
    uploadArea.addEventListener('click', (e) => {
      // 파일 선택 버튼이 아닌 경우에만 파일 다이얼로그 열기
      if (!e.target.closest('button')) {
        imageInput.click();
      }
    });
    
    uploadArea.addEventListener('dragover', this.handleDragOver.bind(this));
    uploadArea.addEventListener('dragleave', this.handleDragLeave.bind(this));
    uploadArea.addEventListener('drop', this.handleDrop.bind(this));
    
    imageInput.addEventListener('change', this.handleFileSelect.bind(this));
    uploadForm.addEventListener('submit', this.handleUpload.bind(this));
    
    // 취소 버튼 이벤트 추가
    document.getElementById('cancelUploadBtn').addEventListener('click', () => {
      this.resetUpload();
    });
    
    // 갤러리 관리 이벤트
    document.getElementById('categoryFilter').addEventListener('change', this.handleFilterChange.bind(this));
    document.getElementById('gallerySearch').addEventListener('input', this.handleSearchChange.bind(this));
    document.getElementById('searchGalleryBtn').addEventListener('click', this.handleSearch.bind(this));
    document.getElementById('clearGalleryBtn').addEventListener('click', this.handleClearSearch.bind(this));
    
    // 모달 이벤트
    this.bindModalEvents();
  }
  
  bindModalEvents() {
    // 편집 모달
    const editModal = document.getElementById('editImageModal');
    const editClose = editModal.querySelector('.close');
    const saveBtn = document.getElementById('saveImageBtn');
    const deleteBtn = document.getElementById('deleteImageBtn');
    const cancelBtn = document.getElementById('cancelEditBtn');
    
    editClose.addEventListener('click', () => this.closeEditModal());
    saveBtn.addEventListener('click', () => this.saveImage());
    deleteBtn.addEventListener('click', () => this.deleteImage());
    cancelBtn.addEventListener('click', () => this.closeEditModal());
    
    // 미리보기 모달
    const previewModal = document.getElementById('imagePreviewModal');
    const previewClose = previewModal.querySelector('.close');
    
    previewClose.addEventListener('click', () => this.closePreviewModal());
    
    // 모달 배경 클릭으로 닫기
    [editModal, previewModal].forEach(modal => {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.style.display = 'none';
        }
      });
    });
  }
  
  handleDragOver(e) {
    e.preventDefault();
    e.currentTarget.classList.add('dragover');
  }
  
  handleDragLeave(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
  }
  
  handleDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
    
    const files = Array.from(e.dataTransfer.files).filter(file => 
      file.type.startsWith('image/')
    );
    
    if (files.length > 0) {
      this.processFiles(files);
    }
  }
  
  handleFileSelect(e) {
    const files = Array.from(e.target.files);
    this.processFiles(files);
    
    // 파일 선택 후 input 초기화 (같은 파일 재선택 가능하도록)
    e.target.value = '';
  }
  
  processFiles(files) {
    const validFiles = files.filter(file => {
      const validTypes = ['image/jpeg', 'image/png', 'image/webp'];
      const maxSize = 10 * 1024 * 1024; // 10MB
      
      if (!validTypes.includes(file.type)) {
        alert(`${file.name}: 지원하지 않는 파일 형식입니다.`);
        return false;
      }
      
      if (file.size > maxSize) {
        alert(`${file.name}: 파일 크기가 너무 큽니다. (최대 10MB)`);
        return false;
      }
      
      return true;
    });
    
    if (validFiles.length > 0) {
      this.showPreview(validFiles);
    }
  }
  
  // 한글 파일명 안전하게 처리하는 함수
  sanitizeKoreanFilename(filename) {
    try {
      // 한글 파일명이 깨진 경우 복구 시도
      if (filename.includes('%') || /[^\x00-\x7F]/.test(filename)) {
        return decodeURIComponent(filename);
      }
      return filename;
    } catch (error) {
      console.warn('파일명 디코딩 실패:', error);
      return filename;
    }
  }
  
  showPreview(files) {
    const previewContainer = document.getElementById('previewGrid');
    previewContainer.innerHTML = '';
    
    files.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        // 한글 파일명 안전하게 처리
        const safeFileName = this.sanitizeKoreanFilename(file.name);
        
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';
        previewItem.innerHTML = `
          <img src="${e.target.result}" alt="미리보기">
          <div class="preview-item-info">
            <div class="preview-item-title" title="${safeFileName}">${safeFileName}</div>
            <div class="preview-item-size">${this.formatFileSize(file.size)}</div>
          </div>
          <button class="preview-item-remove" onclick="galleryManager.removePreview(${index})">×</button>
        `;
        previewContainer.appendChild(previewItem);
      };
      reader.readAsDataURL(file);
    });
    
    this.selectedFiles = files;
    document.getElementById('uploadPreview').style.display = 'block';
    document.getElementById('uploadActions').style.display = 'flex';
    document.getElementById('uploadActions').style.gap = '12px';
  }
  
  removePreview(index) {
    this.selectedFiles.splice(index, 1);
    this.showPreview(this.selectedFiles);
    
    if (this.selectedFiles.length === 0) {
      document.getElementById('uploadPreview').style.display = 'none';
      document.getElementById('uploadActions').style.display = 'none';
    }
  }
  
  async handleUpload(e) {
    e.preventDefault();
    
    if (!this.selectedFiles || this.selectedFiles.length === 0) {
      alert('업로드할 이미지를 선택해주세요.');
      return;
    }
    
    const uploadBtn = document.getElementById('uploadBtn');
    const btnText = uploadBtn.querySelector('.btn-text');
    const btnLoading = uploadBtn.querySelector('.btn-loading');
    
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline';
    uploadBtn.disabled = true;
    
    try {
      const formData = new FormData();
      this.selectedFiles.forEach(file => {
        formData.append('images', file);
      });
      
      const response = await fetch('/admin/gallery/upload', {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert('이미지가 성공적으로 업로드되었습니다.');
        this.resetUpload();
        this.loadGallery();
      } else {
        alert(`업로드 실패: ${result.message}`);
      }
    } catch (error) {
      console.error('업로드 오류:', error);
      alert('업로드 중 오류가 발생했습니다.');
    } finally {
      btnText.style.display = 'inline';
      btnLoading.style.display = 'none';
      uploadBtn.disabled = false;
    }
  }
  
  resetUpload() {
    // 파일 input 초기화
    const imageInput = document.getElementById('imageInput');
    imageInput.value = '';
    
    // UI 초기화
    document.getElementById('uploadPreview').style.display = 'none';
    document.getElementById('uploadActions').style.display = 'none';
    
    // 선택된 파일 배열 초기화
    this.selectedFiles = [];
    
    // 미리보기 그리드 초기화
    document.getElementById('previewGrid').innerHTML = '';
  }
  
  async loadGallery() {
    try {
      const params = new URLSearchParams({
        page: this.currentPage,
        limit: this.itemsPerPage,
        category: this.currentFilter,
        search: this.currentSearch
      });
      
      const response = await fetch(`/api/admin/gallery?${params}`);
      const result = await response.json();
      
      if (result.success) {
        this.currentImages = result.data.images;
        this.renderGallery();
        this.renderPagination(result.data.pagination);
      } else {
        console.error('갤러리 로드 실패:', result.message);
      }
    } catch (error) {
      console.error('갤러리 로드 오류:', error);
    }
  }
  
  renderGallery() {
    const galleryGrid = document.getElementById('galleryGrid');
    galleryGrid.innerHTML = '';
    
    this.currentImages.forEach(image => {
      // 한글 데이터 안전하게 처리
      const safeTitle = this.sanitizeKoreanFilename(image.title || '이미지');
      const safeDescription = this.sanitizeKoreanFilename(image.description || '');
      const safeOriginalName = this.sanitizeKoreanFilename(image.originalName || '');
      
      const galleryItem = document.createElement('div');
      galleryItem.className = 'gallery-item';
      galleryItem.innerHTML = `
        <img src="/uploads/gallery/${image.filename}" alt="${safeTitle}" loading="lazy">
        <div class="gallery-item-info">
          <div class="gallery-item-title" title="${safeTitle}">${safeTitle}</div>
          <div class="gallery-item-description" title="${safeDescription}">${safeDescription}</div>
          <div class="gallery-item-meta">
            <span>${image.category}</span>
            <span>${this.formatFileSize(image.fileSize)}</span>
          </div>
        </div>
        <div class="gallery-item-actions">
          <button class="gallery-item-btn preview" onclick="galleryManager.previewImage(${image.id})" title="미리보기">👁️</button>
          <button class="gallery-item-btn edit" onclick="galleryManager.editImage(${image.id})" title="편집">✏️</button>
          <button class="gallery-item-btn delete" onclick="galleryManager.deleteImage(${image.id})" title="삭제">🗑️</button>
        </div>
      `;
      galleryGrid.appendChild(galleryItem);
    });
  }
  
  renderPagination(pagination) {
    const paginationContainer = document.getElementById('galleryPagination');
    // 페이징 구현은 생략 (필요시 추가)
  }
  
  async previewImage(imageId) {
    try {
      const response = await fetch(`/api/admin/gallery/${imageId}`);
      const result = await response.json();
      
      if (result.success) {
        const image = result.data;
        
        // 한글 데이터 안전하게 처리
        const safeTitle = this.sanitizeKoreanFilename(image.title || '이미지');
        const safeOriginalName = this.sanitizeKoreanFilename(image.originalName || '');
        
        document.getElementById('previewTitle').textContent = safeTitle;
        document.getElementById('previewImage').src = `/uploads/gallery/${image.filename}`;
        document.getElementById('previewImage').alt = safeTitle;
        document.getElementById('previewFilename').textContent = safeOriginalName;
        document.getElementById('previewSize').textContent = this.formatFileSize(image.fileSize);
        document.getElementById('previewResolution').textContent = `${image.width || 'N/A'} × ${image.height || 'N/A'}`;
        document.getElementById('previewDate').textContent = new Date(image.createdAt).toLocaleDateString('ko-KR');
        
        document.getElementById('imagePreviewModal').style.display = 'block';
      }
    } catch (error) {
      console.error('이미지 미리보기 오류:', error);
    }
  }
  
  async editImage(imageId) {
    try {
      const response = await fetch(`/api/admin/gallery/${imageId}`);
      const result = await response.json();
      
      if (result.success) {
        const image = result.data;
        this.editingImageId = imageId;
        
        // 한글 데이터 안전하게 처리
        const safeTitle = this.sanitizeKoreanFilename(image.title || '');
        const safeDescription = this.sanitizeKoreanFilename(image.description || '');
        
        document.getElementById('editTitle').value = safeTitle;
        document.getElementById('editDescription').value = safeDescription;
        document.getElementById('editCategory').value = image.category || 'facility';
        document.getElementById('editSortOrder').value = image.sortOrder || 0;
        document.getElementById('editIsActive').checked = Boolean(image.isActive);
        
        document.getElementById('editImageModal').style.display = 'block';
      }
    } catch (error) {
      console.error('이미지 편집 오류:', error);
    }
  }
  
  async saveImage() {
    if (!this.editingImageId) return;
    
    try {
      // 입력값 검증 및 한글 안전 처리
      const title = document.getElementById('editTitle').value.trim();
      const description = document.getElementById('editDescription').value.trim();
      
      if (!title) {
        alert('제목을 입력해주세요.');
        return;
      }
      
      const data = {
        title: title,
        description: description,
        category: document.getElementById('editCategory').value || 'facility',
        sortOrder: parseInt(document.getElementById('editSortOrder').value) || 0,
        isActive: document.getElementById('editIsActive').checked
      };
      
      const response = await fetch(`/api/admin/gallery/${this.editingImageId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert('이미지 정보가 업데이트되었습니다.');
        this.closeEditModal();
        this.loadGallery();
      } else {
        alert(`업데이트 실패: ${result.message}`);
      }
    } catch (error) {
      console.error('이미지 저장 오류:', error);
      alert('저장 중 오류가 발생했습니다.');
    }
  }
  
  async deleteImage(imageId) {
    if (!confirm('정말로 이 이미지를 삭제하시겠습니까?')) return;
    
    try {
      const response = await fetch(`/api/admin/gallery/${imageId}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert('이미지가 삭제되었습니다.');
        this.loadGallery();
      } else {
        alert(`삭제 실패: ${result.message}`);
      }
    } catch (error) {
      console.error('이미지 삭제 오류:', error);
      alert('삭제 중 오류가 발생했습니다.');
    }
  }
  
  closeEditModal() {
    document.getElementById('editImageModal').style.display = 'none';
    this.editingImageId = null;
  }
  
  closePreviewModal() {
    document.getElementById('imagePreviewModal').style.display = 'none';
  }
  
  handleFilterChange(e) {
    this.currentFilter = e.target.value;
    this.currentPage = 1;
    this.loadGallery();
  }
  
  handleSearchChange(e) {
    this.currentSearch = e.target.value;
  }
  
  handleSearch() {
    this.currentPage = 1;
    this.loadGallery();
  }
  
  handleClearSearch() {
    this.currentSearch = '';
    this.currentFilter = '';
    document.getElementById('gallerySearch').value = '';
    document.getElementById('categoryFilter').value = '';
    this.currentPage = 1;
    this.loadGallery();
  }
  
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

// 갤러리 매니저 초기화
const galleryManager = new GalleryManager();
</script>

<%- include('partials/footer') %>
